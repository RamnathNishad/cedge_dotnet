MVC:-  Model View Controller

-Design Pattern for Web Application

-Design(Server Controls)<----->event handles at server using Code-behind the controls
Seperation of Concern
TextBox(t2)------------>event_click_t1(some task)

Design --->View(input/output)--->Html
Model:----Data and Business logic
Controller:---Request procession

Request------->Controller------>Action Method--------> Response[(View=Html+CS+Data(Model)]
---Razor View Engine------>
View file extension .cshtml


===================Types of Views========================
1) Weakly-typed view:- No Model is binded with the view

2) Stronlgy-typed view:- Model binded with the view


==============State management in ASP.NET MVC=========================
Passing data from action to views and also across controller actions while navigation
Server-side methods:-
1) ViewData:- is used to pass data from action to its view not to other action/view. It is a key/value pair data like Dictionary object.
-Requires type-casting while accessing

2) ViewBag:- It's scope and life-time is same like ViewData but it is of dynamic type
-does not requires type-casting while accessing
-No intelligence will be provided and operation will be resolved at runtime which may give errors if not compatible.

3) TempData:- It is accessible across controllers also.
-Store and access using key/value pair
-Needs type-casting before use
-Gets removed from the memory as soon as it is accessed

Action1(TempData)-------->View1(TempData)------->Controller2/Action2/View2(TempData)
-TempData.Keep(k) ----retain the specified tempdata
-TempData.Keep()   ----retain all the tempdata

4) Session:- It is user-session specific data that is accessible throughout the application anywhere.
-In ASP.Net core, session is NOT by default available, we need to configure in Program.cs file to use it.


Client-side methods:-
5) Cookies:- These are text files maintained at client-machine by the server for read and write.
-less secure at client-machine
-text-based data only , can't store object
-size limitations , max 4KB
-key/value pair

6) Querystring:- Data to be passed is added in the url after:
	 http://localhost/Home/Index?x=100&y=200 

-client-side in the browser url, data is visible
-simple data with name and value


====================================Day2==============================
----using scaffolding and default view templates for CRUD operations


ViewModel:-  This model is used as per view requirement which may not map one-to-one with the application entity models

Model:- Employee (Ecode,Ename,Salary,Deptid)

	[ViewModel(Ecode,Ename,Salary,List<string> Dnames)]

View:--ViewModel

=======================Working with different HTML controls in MVC Razor syntaxes===================
 
Model:
 public class Customer
 {
     public int Id { get; set; }
     public string CustName { get; set; }
     public string Gender { get; set; }
     public List<string> Hobbies { get; set; }
 }

1) Radio Buttons
<div class="form-group">
     <label asp-for="Gender" class="control-label"></label>
     <input type="radio" value="M" name="Gender" /> Male
     <input type="radio" value="F" name="Gender" /> Female
     <span asp-validation-for="Gender" class="text-danger"></span>
 </div>

2) Checkboxes
 <div class="form-group">
     <label asp-for="Hobbies" class="control-label"></label>
     @foreach (var item in Model.Hobbies)
     {
         <input type="checkbox" name="hobbies" value="@item"/>@item
     }
     <span asp-validation-for="Hobbies" class="text-danger"></span>
 </div>


3) DropdownList:-
Model:
public class EmployeeVM
{
    public int Ecode {  get; set; }
    public string Ename { get; set; }
    public int Salary {  get; set; }
    public int Deptid { get; set; }

    public List<SelectListItem> DeptIds { get; set; }
}

//Model instance passed to view for default values:
var vm = new EmployeeVM
{
    DeptIds =new  List<SelectListItem>
    {
        new SelectListItem { Text = "Account", Value = "201" },
        new SelectListItem { Text = "Admin", Value = "202" },
        new SelectListItem { Text = "Sales", Value = "203" }
    } 
};

//View design for DropdwonList:

                <select asp-for="Deptid" asp-items="@Model.DeptIds"></select>
OR
                @Html.DropDownListFor(Model=>Model.Deptid,Model.DeptIds,new {@class="form-control"})
 
=================================Day3================================
Views:-
Types of views based on usage and sharing:-
Partial Views:- These are the veiw which are not directly used but we share them across multiple views.
usage: if there are common design UI is there in multiple views so instead of desiging in each views, we just designn a partial view with common UI and use it in all the views wherever it is needed.
adv:
-saves time as it is designed only once and shared across
-maintenance also is centralized so it maintains the consistent look and feel in all views.
- if a view is very complex then we can split the main view into n number of partial views and this splitting can go further till we get simpler view to handle.


* Shared views are kept inside the default location folder "Shared" 
* Its name starts with underscore(_viewname.cshtml)


How to use this partial view inside the main or parent view.
-Html.Partial("_child"):- It returns HtmlContent object of the child view to the parent view
-Html.RenderPartial("_child"):- returns void so it directly embeds the child view into the parent view

*If we don't pass model instance to the strongly-typed views then by default parent model instance is passed else
we can also pass manually 
	Html.RenderPartial("_childView",model_instance)


*_ViewStart.cshtml:- It is a special view which is automatically called before each view. So it can be used for any common statements which are needed across all views. 
for e.g. If i want to link all the views with layout i can do it in this _ViewStart.cshtml

* _Layout.cshtml:- It is the layout view which decides what will the page structure of the views using that layout.

we link layout with the view using :
	Layout="_Layout";  //default location is Shared folder else relative path is needed

*we can always overwrite the layout inside the view by putting null if u don't want layout or different layout
	@{
		Layout=null;

		//OR
		Layout="_L2"
	}

* @RenderBody() :- It is used inside the Layout to specify the html of the view to be embedded as per design required.
-There can be only one RenderBody() with no parameter

* We can define Sections in View pages and call them using @RenderSection("section_name",false)
	where "section_name" should be defined in the view:
	@section s1{
		---html statements---
	}
*RenderBody() uses the html of the view page which is not defined with any section name.

=======================Model Validations======================
We must validate the forms before posting it from client-side and also some validations may be needed at server side .
	empty check-------> at client-side
	email id or record exists or not can be done at server side from database
a) Client-side validations:-
	it is done using javascript/jquery

b) Server-side validations:-
	--it is done in the controller/action methods

If the model is invalid then there is one boolean property of the object "ModelState.IsValid" that can tell u whether data is valid or invalid.

* to configure validations, we can use predefined validation attributes:
	[Required]
	
	[StringLength]

	[Regex]




	 
Remote validation:- client-side validation can be done without going to server












 












