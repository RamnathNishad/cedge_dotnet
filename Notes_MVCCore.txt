MVC:-  Model View Controller

-Design Pattern for Web Application

-Design(Server Controls)<----->event handles at server using Code-behind the controls
Seperation of Concern
TextBox(t2)------------>event_click_t1(some task)

Design --->View(input/output)--->Html
Model:----Data and Business logic
Controller:---Request procession

Request------->Controller------>Action Method--------> Response[(View=Html+CS+Data(Model)]
---Razor View Engine------>
View file extension .cshtml


===================Types of Views in ASP.NET Core MVC========================
1) Weakly-typed view:- No Model is binded with the view

2) Stronlgy-typed view:- Model binded with the view


==============State management in ASP.NET MVC=========================
Passing data from action to views and also across controller actions while navigation
Server-side methods:-
1) ViewData:- is used to pass data from action to its view not to other action/view. It is a key/value pair data like Dictionary object.
-Requires type-casting while accessing

2) ViewBag:- It's scope and life-time is same like ViewData but it is of dynamic type
-does not requires type-casting while accessing
-No intelligence will be provided and operation will be resolved at runtime which may give errors if not compatible.

3) TempData:- It is accessible across controllers also.
-Store and access using key/value pair
-Needs type-casting before use
-Gets removed from the memory as soon as it is accessed

Action1(TempData)-------->View1(TempData)------->Controller2/Action2/View2(TempData)
-TempData.Keep(k) ----retain the specified tempdata
-TempData.Keep()   ----retain all the tempdata

4) Session:- It is user-session specific data that is accessible throughout the application anywhere.
-In ASP.Net core, session is NOT by default available, we need to configure in Program.cs file to use it.


Client-side methods:-
5) Cookies:- These are text files maintained at client-machine by the server for read and write.
-less secure at client-machine
-text-based data only , can't store object
-size limitations , max 4KB
-key/value pair

6) Querystring:- Data to be passed is added in the url after:
	 http://localhost/Home/Index?x=100&y=200 

-client-side in the browser url, data is visible
-simple data with name and value


====================================Day2==============================
----using scaffolding and default view templates for CRUD operations


ViewModel:-  This model is used as per view requirement which may not map one-to-one with the application entity models

Model:- Employee (Ecode,Ename,Salary,Deptid)

	[ViewModel(Ecode,Ename,Salary,List<string> Dnames)]

View:--ViewModel

=======================Working with different HTML controls in MVC Razor syntaxes===================
 
Model:
 public class Customer
 {
     public int Id { get; set; }
     public string CustName { get; set; }
     public string Gender { get; set; }
     public List<string> Hobbies { get; set; }
 }

1) Radio Buttons
<div class="form-group">
     <label asp-for="Gender" class="control-label"></label>
     <input type="radio" value="M" name="Gender" /> Male
     <input type="radio" value="F" name="Gender" /> Female
     <span asp-validation-for="Gender" class="text-danger"></span>
 </div>

2) Checkboxes
 <div class="form-group">
     <label asp-for="Hobbies" class="control-label"></label>
     @foreach (var item in Model.Hobbies)
     {
         <input type="checkbox" name="hobbies" value="@item"/>@item
     }
     <span asp-validation-for="Hobbies" class="text-danger"></span>
 </div>


3) DropdownList:-
Model:
public class EmployeeVM
{
    public int Ecode {  get; set; }
    public string Ename { get; set; }
    public int Salary {  get; set; }
    public int Deptid { get; set; }

    public List<SelectListItem> DeptIds { get; set; }
}

//Model instance passed to view for default values:
var vm = new EmployeeVM
{
    DeptIds =new  List<SelectListItem>
    {
        new SelectListItem { Text = "Account", Value = "201" },
        new SelectListItem { Text = "Admin", Value = "202" },
        new SelectListItem { Text = "Sales", Value = "203" }
    } 
};

//View design for DropdwonList:

                <select asp-for="Deptid" asp-items="@Model.DeptIds"></select>
OR
                @Html.DropDownListFor(Model=>Model.Deptid,Model.DeptIds,new {@class="form-control"})
 
=================================Day3================================
Views:-
Types of views based on usage and sharing:-
Partial Views:- These are the veiw which are not directly used but we share them across multiple views.
usage: if there are common design UI is there in multiple views so instead of desiging in each views, we just designn a partial view with common UI and use it in all the views wherever it is needed.
adv:
-saves time as it is designed only once and shared across
-maintenance also is centralized so it maintains the consistent look and feel in all views.
- if a view is very complex then we can split the main view into n number of partial views and this splitting can go further till we get simpler view to handle.


* Shared views are kept inside the default location folder "Shared" 
* Its name starts with underscore(_viewname.cshtml)


How to use this partial view inside the main or parent view.
-Html.Partial("_child"):- It returns HtmlContent object of the child view to the parent view
-Html.RenderPartial("_child"):- returns void so it directly embeds the child view into the parent view

*If we don't pass model instance to the strongly-typed views then by default parent model instance is passed else
we can also pass manually 
	Html.RenderPartial("_childView",model_instance)


*_ViewStart.cshtml:- It is a special view which is automatically called before each view. So it can be used for any common statements which are needed across all views. 
for e.g. If i want to link all the views with layout i can do it in this _ViewStart.cshtml

* _Layout.cshtml:- It is the layout view which decides what will the page structure of the views using that layout.

we link layout with the view using :
	Layout="_Layout";  //default location is Shared folder else relative path is needed

*we can always overwrite the layout inside the view by putting null if u don't want layout or different layout
	@{
		Layout=null;

		//OR
		Layout="_L2"
	}

* @RenderBody() :- It is used inside the Layout to specify the html of the view to be embedded as per design required.
-There can be only one RenderBody() with no parameter

* We can define Sections in View pages and call them using @RenderSection("section_name",false)
	where "section_name" should be defined in the view:
	@section s1{
		---html statements---
	}
*RenderBody() uses the html of the view page which is not defined with any section name.

=======================Model Validations======================
We must validate the forms before posting it from client-side and also some validations may be needed at server side .
	empty check-------> at client-side
	email id or record exists or not can be done at server side from database
a) Client-side validations:-
	it is done using javascript/jquery

b) Server-side validations:-
	--it is done in the controller/action methods

If the model is invalid then there is one boolean property of the object "ModelState.IsValid" that can tell u whether data is valid or invalid.

* to configure validations, we can use predefined validation attributes:
	[Required]
	
	[StringLength]

	[Regex]



* Validation comparing with other fields i.e. cross-fields validations:
a) using Custom Validation attribute:

model level:
	IValidationObject interface having IsValid method which is used to return true/false based on validations.



b) Remote validations:- for validation asynchronously using AJAX(Asynchronous JavaScript library)
	 
This will work only if Unobtrusive AJAX script is enabled.
[Remote] attribute is to be used for the model field to be validated


c) using a separate validation custom class. This gives u more sharing across the application.

public class CheckSalary : ValidationAttribute

==========================Dependency Injection==========================
Dependency injection is a inbuilt service of ASP.NET Core which works on the principle of IoC i.e. Inversion of Control. The dependencies objects are injected into the consumer(controller) for use. This makes the application more decoupled hence we get more testability and more easier maintainability of the code.

SOLID: Dependency Principle says that the higher level objects/modules should not directly depend on the lower level objects/modules rather they shud depend on abstraction i.e. interface  


Ways of injecting instances int .NET Core:
1) using constructor
2) using method
3) using properties

steps for implementation:
1) define the interface 
2) define the dependency class 
3) implement the interface in the class
4) configure the dependency injection in Program.cs file 
5) inject the instance in the application and use it 


Based on scope and lifetime of the object, there are 3 methods to inject:
1) AddSingleton():- Only one instance will be maintained throughout the application.
2) AddTransient():- For every request of the object, a new instance is created and after use it is removed from the memory. if u don't want to maintain state of the data inside the instance in subsequent calls then we shud use it.
for e.g. logger instance and any other utility object.
 
3) AddScoped():- It maintains the instance within the multiple requests of the same http context

How to inject using methods:- we need to use one attribute to the parameter interface [FromServices]

==============================Error Handling in ASP.NET Core====================
ways of handling errors:
1) try/catch/finally
2) Unhandled exceptions can be handled in two environments:
	a) Development:- It should show detailed error for developer
	b) Production:- It should show only relevant error details not stack trace details shud not be exposed as it becomes vulnerable as errors contains lot of server information like database info etc which can be misused.

3) How to handle application errors globally.
This is used for unhandled exception across application if it occurs any part of the application even though exceptions are handled properly everywhere.

It is done using middleware in the request pipeline.
steps :
a) Define the Global Exception handler class:
 public class GlobalExceptionHandler
 {
     private readonly RequestDelegate next;
     public GlobalExceptionHandler(RequestDelegate next)
     {
         this.next = next;
     }
     public async Task InvokeAsync(HttpContext context)
     {
         try
         {
             await next(context);
         }
         catch (Exception ex)
         {
             context.Response.StatusCode = 500;
             context.Response.ContentType = "application/json";
             await context.Response.WriteAsync("error:unexpected error--->"+ex.Message);
         }
     }
 }

b) Configure the Global error handler in the Program.cs file as Middleware
        app.UseMiddleware<GlobalExceptionHandler>();


4) Http Status Errors:- For this we need use another middlerware:
i)app.UseStatusCodePages();    -----uses in-built error pages

ii) app.UseStatusCodePagesWithReExecute("/Error/{0}");  ---can be programmed to use user-defined error views as per controller logic:
 public class ErrorController : Controller
 {
     [Route("/Error/{statusCode}")]
     public IActionResult Index(int statusCode)
     {
         switch(statusCode)
         {
             case 404:
                 return View("NotFound");  //these views must be created with info as per http status errors
             case 500:
                 return View("InternalServerError");
             default:
                 return View("Error");
         }           
     }
 }

============Error logging =====================





=============================Day6=================================
ADO.NET:- Data Access Component for interacting backend database.
 
MVC-------->Service(API)-----> BusinessLayer------>Data Access Layer(ADO.NET)---->DB Operations(CRUD)



MVC----->BussinessLayer--->Data Access Layer(ADO.NET)---->DB Operations (CRUD)


ADO.NET architecture:
Two modes of database operation:
a) Connected mode:-  Connection has to be always active while working with data even though u r not using the data or records.

b) Disconnected mode:-In this case, data is retrieved and cached into memory and then connection is closed. Once user has manipulated the records in the memory then reopen the connection and save to database.
Since in between retrieving and saving we don't need connection as we r working in memory, it is the disconnected approach.



We need the packages to be installed to work with ADO.NET and these packages are different based on which database we r using.
for e.g.	
	for MS SQL Server--------> System.Data.SqlClient
	for various SQL databases like oracle,sql server and so on
		we can use System.Data.OleDb
	for Oracle database------> System.Data.OracleClient

---------------working with ADO.NET components in Connected mode:-
	-SqlConnection  ----for configuring the server, database,authentication etc
	-SqlCommand ----- for configuring SQL commands like INSERT,DELETE,UPDATE,SELECT, Stored Procedures
		-Methods: 
			-ExecuteNonQuery() when SQL command is I,D,U, it returns int showing no. of rows affected 
			-ExecuteReader() when SQL command is SELECT, it returns SqlDataReader

	-SqlDataReader----- it is the pointer to the recordset when the command is SELECT query.

	-SqlParameter----- for configuring the parameters of the SqlCommand object


Note: Do not hard-code the connection string in the application. It should be kept outside in appsettings.json file and read in the application.
	-install Microsoft.Extensions.Configuration
	-inject the IConfiguration config
	-access the connectionString using config.GetConnectionString("name")

=============calling stored procedure in ADO.NET=================
-u must specify CommandType.StoredProcedure for SqlCommand object

-last inserted record id value.

Place order-----orderid is auto-generated i.e. identity column, not entered manually.
Note: in the same scope, identity value can be accessed using:
	select @id=SCOPE_IDENTITY()
Return this value using parameter direction output i.e. "out"
Access the value in the ADO.NET by using Direction for the parameter
	for e.g.
 //specify the direction of the parameter order_id
 cmd.Parameters[2].Direction = ParameterDirection.Output;

 //get the value of the parameter
 var orderid = (int)cmd.Parameters[2].Value;
         


==========================Transactions in ADO.NET=======================

----------------------TRANSACTION-------------------
debit:- payee----update balance - amount 
---------error---------
credit:- beneficiary----update balance + amount
----------------------------------------------------
A transaction is a group of related statements which must execute either
all or none in case of any failure.



=============================Day8=========================
SqlCommand ------> ExecuteNonQuery()---->DML
		   ExecuteReader()--->Queries ---return SqlDataReader
		   ExecuteScalar()---> It is also used for SELECT statement command but it gives directly the first row,first column data value. We don't to call Read() method of DataReader.

	SQL-->select sum(salary) from employees
		var totalSalary=(int)cmd.ExecuteScalary();	


=============================Disconnected mode of operation============

Database----DataAdapter(Con,Cmd)------->DataSet----->Application(CRUD)

Note: DataReader is loads one record at a time using Read() methods wheras DataSet holds all the records as per the query executed to fill it.
-DataReader is forward-only and Read-only recordset wheras DataSet can be traversed both the direction using row index randomly and it is editable recordset.


Fill the dataset with the records using DataAdapter
for e.g. 	da.Fill(ds,"employees")

Steps for Insert using DataSet:-
a) create a new record from the DataSet table
	DataRow row = ds.Tables[0].NewRow()

b) specify the column values for the new row
	row[0]=ec;
	row[1]=en;
	row[2]=sal;
	row[3]=did;
c) add this row to the dataset table rows collection
	ds.Tables[0].Rows.Add(row)
d) save changes database from DataSet using DataAdapter Update method:
	SqlCommandBuilder cb=new SqlCommandBuilder(da);
	da.Update(ds,"employees"); //this step only make changes permanent in DB

=================================ASP.NET WEB API=============================
UI(MVC)----->WEB API(Service layer)--------->Repository Layer(DAL)------>Database


WEB API:-
Service  over HTTP protocol should adhere to principles of Restful services.
-service must be developed without worrying the client information.
-service should be capable of giving response in requested format like json,xml,binary etc
-service should communicate over the messages like xml,json and so on
-it shud be stateless i.e. there shud not by any information stored about the client on the server.
-it shud be interacted using uniform resource indicator(uri) i.e. resources at service will be interacted using unique uri. these resources can be a file, a record in database or any other object
-it shud work closely with HTTP Request headers i.e. HTTP GET,HTTP POST,HTTP PUT and HTTP DELETE.
	-GET------> shud read the resource from server
	-POST-----> it shud always create the resource on the server
	-PUT -----> it shud always update the resource on the server
	-DELETE---> it shud the delete the resource on the server

ASP.NET Core WEB API:-
-MVC(without view)
-Dependency inject in-built
-Routing services
-Middleware architecture


=====================Routing in ASP.NET Core=====================
Two types of routing :
1) Conventional routing :- It is specified in Program.cs file at one place all the routes are configured.
2) Attribute routing:- It is more comfortable as it is specified on the controller and action methods itself.
	[Route("url")]

==================================Day10==========================
How to consume the API in clients:-
1) using C# in MVC application (server-side code to communicate WEB API using HttpClient)
2) using JavaScript (in-built Fetch() method or AJAX jQuery library)--->enable CORS in WEB API

Automapper library is useful to map the data from one format to other format as DTO pattern.

- install the Automapper package from NuGet repository
	AutoMapper.Extensions
	Microsoft.DependencyInjection

- //using the AutoMapper
	
 //configure and create mapper object
 MapperConfiguration config = new MapperConfiguration(c => c.CreateMap<DtoEmployee,Employee>());
 //create the mapper using configuration
 IMapper mapper=config.CreateMapper();
 //map source to destination using mapper
 list=mapper.Map<List<Employee>>(dtoLst);
  
-----------------------configuring the AutoMapper globally------------------------
we may need Automapping in different parts of the application at many places so to avoid the recoding mapping configuration, we should configure automapper at global level in the Program.cs file as part of services.

Steps:
1) we need to create a Profile with the base class "Profile" 

public class EmployeeProfile : Profile
{
	public EmployeeProfile()
	{
		CreateMap<DtoEmployee,Employee>();
	}
}

2) We need to add this profile in the Services inside Program.cs
//configure the AutoMapper for Employee Profile
MapperConfiguration config=new MapperConfiguration(c=>c.AddProfile(new EmployeeProfile()));

IMapper mapper=config.CreateMapper();

//add this mapper to the services
builder.Services.AddSingleton(mapper);


=====================Consuming API in JavaScript/AJAX client======================

WEB API by default does not allow access by the clients which are in different domain(i.e. different port no).
-we need to enable CORS policy in Program.cs:
	 //configure CORS policy
 builder.Services.AddCors(options =>
 {
     options.AddPolicy("clients-allowed", opt =>
     {
         opt.WithOrigins("http://localhost:5055")
         .AllowAnyMethod()
         .AllowAnyHeader();
     });
 });

--use the CORS policy
 //use CORS policy
 app.UseCors("clients-allowed");

 app.Run();


-===================Fetch promised based calls to api using JavaScript=================
function getEmps() {
    fetch("http://localhost:5142/api/Employees/GetAllEmps")
        .then(response => response.json())
        .then(data => {
            console.log(data)
        });
}
-================AJAX is javascript library to call api===================
add jquery library in ur page for ajax calls.

function getEmpsAJax() {
    $.ajax({
        url: "http://localhost:5142/api/Employees/GetAllEmps",
        type: "GET",
        success: function (response) {
            console.log(response);
        },
        error: function (errRes) {
            console.log("error:", errRes);
        }
    });
}

==========================MediaTypeFormatter=========================
These are components of api which serialize and deserialize the request/response in different formats like JSON or XML
By default JSON and XML formatter are already there with ASP.NET Web API, we need to enable to use them.
We do this using Middleware options:
  builder.Services.AddControllers(options => {
      options.OutputFormatters.Add(new XmlSerializerOutputFormatter());
      });
        


=================Global Exception Handling in API===================
steps:
1) define the Global Exception handler class implementing IMiddleware. use the ProblemDetails object for sending error details:
public class GlobalExceptionHandler : IMiddleware
{
    public async Task InvokeAsync(HttpContext context, RequestDelegate next)
    {
        try
        {
           await next(context);
        }
        catch (Exception ex)
        {
            //send the error response with proper details as per user
            ProblemDetails details = new ProblemDetails
            {
                Detail="Some server error occurred:"+ ex.Message,
                Status=(int)HttpStatusCode.InternalServerError,
                Title="Server error",
                Type="Internal Server error"
            };

            //serialize this details into json
            string json=JsonSerializer.Serialize(details);
            //set the content type of response as json
            context.Response.ContentType = "application/json";
            //send the error response
            await context.Response.WriteAsync(json);
        }
    }
} 

2) add and use this middleware in Program.cs:
 //configure GlobalException Middleware
 builder.Services.AddScoped<GlobalExceptionHandler>();

 var app = builder.Build();

 //use GlobalException Middleware
 app.UseMiddleware<GlobalExceptionHandler>();
 app.Run();


========================Securing API Endpoints using JWT Bearer token======================

JWT:- JSON WEB TOKEN
What is JWT?
-You want data sent between the two parties to be digitally signed and either party can confirm of it's authenticity.

-We can use this technology to implement authentication and authorization in any API in any programming language.

JWT Token has 3 components:
header.payload.(header+payload+secretkey)===>jwt token

-How to make API endpoints secure:
1) use [Authorize] attribute on to controller if u want whole controller endpoints to be secured or can be used only at action level also

2) Add Authentication scheme into ur Program.cs
we need to install following packages: 
-Microsoft.AspNetCore.Authentication.JwtBearer
-System.IdentityModle.Tokens.Jwt

3) Add Authentication middleware for jWt bearer token and specify what are the parameters to be checked in token.


=========================Role-based Authentication==========================
Claims----->Role and custom claims based authentication and authorization.


 

Authentication Cookie in the browser to give access to the users using login page.

steps:-
1) whenever user access any MVC pages, application will check if cookie token of user is there or not.
2) if cookie is not there, it will redirect automatically to Login page(View)
3) Once it goes to login then after credential is validated, its auth cookie will be (signin)stored in the browser
4) U shud remove the auth cookie from the session when user is logged off
   


Session end event:-
ASP.NET Core is session less at server, no session is maintained. It uses Session cookie at client-side.

We can use Custom Middleware to execute some logic to perform some session end task.

user---sends request at 2:00pm--------> u will note the timing
let's say user did not send any request to server for 10 min so u want to clear the session or perform some logic at server.
user----sends request after 2:10 pm-----> u will note the timing 

difference of time is 10 minutes for the user








Session_End
Session_Start




===========================Unit Testing======================
//AAA

//A -> Arrange i.e. arranging all the details needed to test a method


//A -> Act i.e. Acting means executing the method with all the details 


//A -> Assert i.e.  Checking the expected and actual result to decide whether this test case is failed or success.

=============Mocking the dependency in unit test==================
The dependency objects or components needs to be mocked for their instances.

We need to install a package "Moq" and it gives u the Mock<T> 












NUnit
MS Test
xUnit

























Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=SampleDB;Integrated Security=True;























UI Controller------->Data Access component------>Other utility classes











 












